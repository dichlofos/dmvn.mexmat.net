<?php
  // ------------------------------------------------------------------------------------
  // sdg-implementation.php
  // This is part of Site Data Generator (PHP Version)
  // (C) Copyright by ]DichlofoS[ Systems, Inc, 2005
  // ------------------------------------------------------------------------------------
  
  error_reporting(E_ALL);

  // ------------------------------------------------------------------------------------
  function nIntCommandArgCount($strCommandName)
  {
    if ($strCommandName == 'text')          return 1;
    if ($strCommandName == 'caption')       return 1;
    if ($strCommandName == 'textcolor')     return 1;
    if ($strCommandName == 'captioncolor')  return 1;
    if ($strCommandName == 'section')       return 1;
    if ($strCommandName == 'secdef')        return 1;
    if ($strCommandName == 'catdef')        return 1;
    if ($strCommandName == 'sectitle')      return 1;
    if ($strCommandName == 'title')         return 1;
    if ($strCommandName == 'desc')          return 1;
    if ($strCommandName == 'date')          return 1;
    if ($strCommandName == 'ntext')         return 1;
    if ($strCommandName == 'flink')         return 2;
    if ($strCommandName == 'llink')         return 2;
    if ($strCommandName == 'resource')      return 2;
    if ($strCommandName == 'image')         return 2;
    if ($strCommandName == 'bf')            return 1;
    if ($strCommandName == 'it')            return 1;
    if ($strCommandName == '0')             return 0;
    if ($strCommandName == '~')             return 0;
    if ($strCommandName == '\\')            return 0;
    if ($strCommandName == 'lcurl')         return 0;
    if ($strCommandName == 'rcurl')         return 0;
    if ($strCommandName == 'cr')            return 0;
    if ($strCommandName == 'crs')           return 0;
    if ($strCommandName == '&')             return 0;
    if ($strCommandName == 'bullet')        return 0;
    if ($strCommandName == '|')             return 0;
    return -1;
  }


  // Global definition need only in strTransliterateCommand()
  $arrCommandTr['text']           = 'text';
  $arrCommandTr['caption']        = 'caption';
  $arrCommandTr['textcolor']      = 'textcolor';
  $arrCommandTr['captioncolor']   = 'captioncolor';
  $arrCommandTr['section']        = 'section';
  $arrCommandTr['secdef']         = 'secdef';
  $arrCommandTr['catdef']         = 'catdef';
  $arrCommandTr['sectitle']       = 'sectitle';
  $arrCommandTr['title']          = 'title';
  $arrCommandTr['desc']           = 'desc';
  $arrCommandTr['date']           = 'date';
  $arrCommandTr['ntext']          = 'ntext';
  $arrCommandTr['flink']          = 'flink';
  $arrCommandTr['llink']          = 'llink';
  $arrCommandTr['resource']       = 'resource';
  $arrCommandTr['image']          = 'image';
  $arrCommandTr['bf']             = 'bf';
  $arrCommandTr['it']             = 'it';
  $arrCommandTr['0']              = 'null';
  $arrCommandTr['~']              = 'tilde';
  $arrCommandTr['\\']             = 'backslash';
  $arrCommandTr['lcurl']          = 'lcurl';
  $arrCommandTr['rcurl']          = 'rcurl';
  $arrCommandTr['cr']             = 'cr';
  $arrCommandTr['crs']            = 'crs';
  $arrCommandTr['&']              = 'amp';
  $arrCommandTr['bullet']         = 'bullet';
  $arrCommandTr['|']              = 'vline';

  // ------------------------------------------------------------------------------------
  function strTransliterateCommand($strCommandName)
  {
    global $arrCommandTr;
    return $arrCommandTr[$strCommandName];
  }

  // ------------------------------------------------------------------------------------
  function PreprocessLigatures(&$strContent)
  {
    // We should replace ligatures in the following order:
    // ---
    // --
    // <<
    // >>
    $strContent = str_replace("---", "&#8212;", $strContent);
    $strContent = str_replace("--",  "&#8211;", $strContent);
    $strContent = str_replace("<<",  "&#0171;", $strContent);
    $strContent = str_replace(">>",  "&#0187;", $strContent);
  }

  // Parser functions with autogenerated names

  // ------------------------------------------------------------------------------------
  // 'section': item section specification
  function func_int_exec_section($arrPArgs)
  {
    global $itemI;
    $itemI->strSection = $arrPArgs[0];
    return ""; // nothing to pass higher...
  }
  // ------------------------------------------------------------------------------------
  // 'text': textblock text
  function func_int_exec_text($arrPArgs)
  {
    global $textblockI;
    $textblockI->strText = $arrPArgs[0];
    return "";
  }
  // ------------------------------------------------------------------------------------
  // 'caption': textblock caption
  function func_int_exec_caption($arrPArgs)
  {
    global $textblockI;
    $textblockI->strCaption = $arrPArgs[0];
    return "";
  }
  // ------------------------------------------------------------------------------------
  // 'textcolor': textblock text color
  function func_int_exec_textcolor($arrPArgs)
  {
    global $textblockI;
    $textblockI->strTextColor = $arrPArgs[0];
    return "";
  }
  // ------------------------------------------------------------------------------------
  // 'captioncolor': textblock caption color
  function func_int_exec_captioncolor($arrPArgs)
  {
    global $textblockI;
    $textblockI->strCaptionColor = $arrPArgs[0];
    return "";
  }
  // ------------------------------------------------------------------------------------
  // 'date': newsblock date
  function func_int_exec_date($arrPArgs)
  {
    global $newsblockI;
    $newsblockI->strDate = $arrPArgs[0];
    return "";
  }
  // ------------------------------------------------------------------------------------
  // 'ntext': newsblock text
  function func_int_exec_ntext($arrPArgs)
  {
    global $newsblockI;
    $newsblockI->strNText = $arrPArgs[0];
    return "";
  }
  // ------------------------------------------------------------------------------------
  // 'title': item title
  function func_int_exec_title($arrPArgs)
  {
    global $itemI;
    $itemI->strTitle = $arrPArgs[0];
    return ""; // nothing to pass higher...
  }
  // ------------------------------------------------------------------------------------
  // 'desc': item description
  function func_int_exec_desc($arrPArgs)
  {
    global $itemI;
    $itemI->strDesc = $arrPArgs[0];
    return ""; // nothing to pass higher...
  }
  // ------------------------------------------------------------------------------------
  // 'flink': far link
  function func_int_exec_flink($arrPArgs)
  {
    return flink($arrPArgs[0], $arrPArgs[1]);
  }

  // ------------------------------------------------------------------------------------
  // 'llink': local link
  function func_int_exec_llink($arrPArgs)
  {
    return llink($arrPArgs[0], $arrPArgs[1]);
  }
  // ------------------------------------------------------------------------------------
  // 'resource': resource url
  function func_int_exec_resource($arrPArgs)
  {
    global $itemI;
    global $strCategory;
    $resR = new CRes; // as of PHP5, we must instantiate new objects

    $resR->strName = trim($arrPArgs[0]);
    $resR->strDesc = trim($arrPArgs[1]);
    $strFName = '../content/'.$strCategory.'/'.trim($arrPArgs[0]);
    if (!file_exists($strFName)) Death("File $strFName does not exist!");
    $resR->nTime = filemtime($strFName);
    $resR->nSize = filesize($strFName);

    $itemI->arrRes[] = $resR;
    return "";
  }
  // ------------------------------------------------------------------------------------
  // 'image': image insertion
  function func_int_exec_image($arrPArgs)
  {
    return "<img src=\"".$arrPArgs[0]."\" border=\"0\" alt=\"".$arrPArgs[1]."\">";
  }
  // ------------------------------------------------------------------------------------
  // 'secdef': section definition
  function func_int_exec_secdef($arrPArgs)
  {
    global $secI;
    $secI->strSection = $arrPArgs[0];
    return ""; // nothing to pass higher...
  }
  // ------------------------------------------------------------------------------------
  // 'catdef': category definition
  function func_int_exec_catdef($arrPArgs)
  {
    global $strCategory;
    $strCategory = $arrPArgs[0];
    return ""; // nothing to pass higher...
  }
  // ------------------------------------------------------------------------------------
  // 'sectitle': section title
  function func_int_exec_sectitle($arrPArgs)
  {
    global $secI;
    $secI->strTitle = $arrPArgs[0];
    return ""; // nothing to pass higher...
  }
  // ------------------------------------------------------------------------------------
  // '0': a-la-relax
  function func_int_exec_null($arrPArgs)
  {
    return '';
  }
  // ------------------------------------------------------------------------------------
  // 'bf': bold text
  function func_int_exec_bf($arrPArgs)
  {
    return '<b>'.$arrPArgs[0].'</b>';
  }
  // ------------------------------------------------------------------------------------
  // 'it': italic text
  function func_int_exec_it($arrPArgs)
  {
    return '<i>'.$arrPArgs[0].'</i>';
  }
  // ------------------------------------------------------------------------------------
  // '~': tilde
  function func_int_exec_tilde($arrPArgs)
  {
    return "&#0126;";
  }

  // ------------------------------------------------------------------------------------
  // '\\': backslash
  function func_int_exec_backslash($arrPArgs)
  {
    return "&#0092;";
  }

  // ------------------------------------------------------------------------------------
  // 'lcurl': left curl bracket
  function func_int_exec_lcurl($arrPArgs)
  {
    return "&#0123;";
  }

  // ------------------------------------------------------------------------------------
  // 'rcurl': right curl bracket
  function func_int_exec_rcurl($arrPArgs)
  {
    return "&#0125;";
  }

  // ------------------------------------------------------------------------------------
  // 'cr': carriage return
  function func_int_exec_cr($arrPArgs)
  {
    return "<br /><br />";
  }

  // ------------------------------------------------------------------------------------
  // 'crs': soft carriage return
  function func_int_exec_crs($arrPArgs)
  {
    return "<br />";
  }

  // ------------------------------------------------------------------------------------
  // '&'
  function func_int_exec_amp($arrPArgs)
  {
    return "&amp;";
  }

  // ------------------------------------------------------------------------------------
  // 'bullet'
  function func_int_exec_bullet($arrPArgs)
  {
    return "&#x2022;";
  }

  // ------------------------------------------------------------------------------------
  // 'vline'
  function func_int_exec_vline($arrPArgs)
  {
    return "&#0124;";
  }
  
  // ------------------------------------------------------------------------------------
  // External functions
  // ------------------------------------------------------------------------------------
  function func_ext_exec_item($arrArgs)
  {
    global $itemI;
    global $arrItems;
    global $strCategory;
    $itemI = new CItem;

    if (!trim($strCategory)) Death("Category specification is missing...");

    PreprocessLigatures($arrArgs[0]);
//    $itemI->Clear();
    $strOutput = strParseContent($arrArgs[0]);
    $itemI->PostprocessLigatures();
    $arrItems[] = $itemI; // PHP5 only
  }
  // ------------------------------------------------------------------------------------
  function func_ext_exec_section($arrArgs)
  {
    global $secI;
    global $arrSections;
    $secI = new CSec;

    PreprocessLigatures($arrArgs[0]);           // prepare,
//    $secI->Clear();                             // then clear target,
    $strOutput = strParseContent($arrArgs[0]);  // maybe fill it with data,
    $secI->PostprocessLigatures();              // do post-processing,
    $arrSections[] = $secI;                     // ...and add to our list.
  }
  // ------------------------------------------------------------------------------------
  function func_ext_exec_textblock($arrArgs)
  {
    global $textblockI;
    global $arrTextBlocks;
    $textblockI = new CTextBlock;

    PreprocessLigatures($arrArgs[0]);           // prepare,
//    $textblockI->Clear();                       // then clear target,
    $strOutput = strParseContent($arrArgs[0]);  // maybe fill it with data,
    $textblockI->PostprocessLigatures();        // do post-processing,
    $arrTextBlocks[] = $textblockI;             // ...and add to our list.
  }
  // ------------------------------------------------------------------------------------
  function func_ext_exec_newsblock($arrArgs)
  {
    global $newsblockI;
    global $arrNewsBlocks;
    $newsblockI = new CNewsBlock;

    PreprocessLigatures($arrArgs[0]);           // prepare,
    //$newsblockI->Clear();                       // then clear target,
    $strOutput = strParseContent($arrArgs[0]);  // maybe fill it with data,
    $newsblockI->PostprocessLigatures();        // do post-processing,
    $arrNewsBlocks[] = $newsblockI;             // ...and add to our list.
  }
  // ------------------------------------------------------------------------------------
  function func_ext_exec_category($arrArgs)
  {
    $strOutput = strParseContent($arrArgs[0]);  // maybe fill it with data
  }
  // ------------------------------------------------------------------------------------

?>